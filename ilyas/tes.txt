now i need to make the parsing_split.c file
- this is a descreption of the functions i need
1- /*
 * Counts the number of words/tokens separated by a given character.
 * Special handling for braced variables (e.g., ${VAR}) to treat them
 * as single tokens. Skips over separator characters and counts distinct
 * word boundaries in the input string.
 *
 * @param s: Input string to analyze
 * @param p: Character used as separator
 * @return: Number of distinct words/tokens found
 */
 2-/*
 * Skips over separators and extracts the next word boundaries.
 * Handles special case of braced variables by treating content within
 * braces as a single unit. Updates the string pointer, length, and
 * start position for the next token to be extracted.
 *
 * @param s: Pointer to current position in string (modified)
 * @param len: Pointer to store length of found token
 * @param p: Separator character to skip
 * @param start: Pointer to store start of found token
 * Side effects: Modifies s pointer position and sets len and start values
 */
 3-/*
 * Copies characters from source to destination buffer.
 * Extracts a token of specified length from the start position
 * into the allocated buffer array at the given index. Null-terminates
 * the copied string for proper C string handling.
 *
 * @param len: Number of characters to copy
 * @param j: Index in the buffer array to store the token
 * @param start: Source position to copy from
 * @param buff: Destination buffer array
 * Side effects: Modifies buffer array at index j
 */
 4-/*
 * Splits a string into an array of tokens based on a separator character.
 * Main parsing function that allocates memory for token array, counts
 * words, and extracts each token while handling special braced variable
 * syntax. Returns a null-terminated array of string tokens.
 *
 * @param s: Input string to split
 * @param p: Character to use as separator
 * @return: Null-terminated array of string tokens, NULL on failure
 * Side effects: Allocates memory for token array and individual strings
 */